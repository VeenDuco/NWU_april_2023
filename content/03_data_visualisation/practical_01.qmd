---
title: "Practical 1"
author: "Developed by Gerko Vink and Erik-Jan van Kesteren, Adapted by Duco Veen"
format: 
  html:
    toc: true
    toc-depth: 5
    toc_float: true
    code-fold: true
---

The following packages are required for this practical:

```{r, message=FALSE}
#| code-fold: false
library(mice)
library(ggplot2)
```

and if you'd like the same results as I have obtained, you can fix the random seed

```{r cache=TRUE}
#| code-fold: false
set.seed(123)
```

# Exercises

1. **Open `RStudio` and continue working in your practicals project. Open a new `R`-script and start working in it for this practical.**


2. **Create a scatterplot between `age` and `bmi` in the `mice::boys` data set with the standard plotting device in `R`:**


```{r cache=TRUE}
plot(mice::boys$bmi ~ mice::boys$age)
```

3. **Now try it using `ggplot2`**


```{r cache=TRUE}
p <- ggplot(mice::boys, aes(age, bmi))
p + geom_point()
```

Package `ggplot2` offers far greater flexibility in data visualization than the standard plotting devices in `R`. However, it has its own language, which allows you to easily expand graphs with additional commands. To make these expansions or layers clearly visible, it is advisable to use the plotting language conventions. For example,

```{r}
#| code-fold: false
#| eval: false
ggplot(data = mice::boys, aes(age, bmi)) +
  geom_point() + 
  geom_smooth() + 
  theme_classic()
```

would yield the same plot as 

```{r}
#| code-fold: false
#| eval: false
ggplot(mice::boys, aes(age, bmi)) + geom_point() + geom_smooth() + theme_classic()
```
but the latter style may be less informative, especially if more customization takes place and if you share your code with others. 


<!-- 2. **Now recreate the plot with the following specifications:** -->

<!-- - If `bmi < 18.5` use `color = "light blue"` -->
<!-- - If `bmi > 18.5 & bmi < 25` use `color = "light green"` -->
<!-- - If `bmi > 25 & bmi < 30` use `color = "orange"` -->
<!-- - If `bmi > 30` use `color = "red"` -->

<!-- Hint: it may help to expand the data set with a new variable.  -->

<!-- It may be easier to create a new variable that creates the specified categories. We can use the `cut()` function to do this quickly -->

<!-- ```{r cache=TRUE} -->
<!-- boys2 <-  -->
<!--   boys %>% -->
<!--   mutate(class = cut(bmi, c(0, 18.5, 25, 30, Inf), -->
<!--                     labels = c("underweight", -->
<!--                                "healthy", -->
<!--                                "overweight", -->
<!--                                "obese"))) -->
<!-- ``` -->

<!-- by specifying the boundaries of the intervals. In this case we obtain 4 intervals: `0-18.5`, `18.5-25`, `25-30` and `30-Inf`. We used the `%>%` pipe to work with `bmi` directly. Alternatively, we could have done this without a pipe: -->

<!-- ```{r cache=TRUE} -->
<!-- boys3 <- boys -->
<!-- boys3$class <- cut(boys$bmi, c(0, 18.5, 25, 30, Inf),  -->
<!--                    labels = c("underweight", -->
<!--                               "healthy", -->
<!--                               "overweight", -->
<!--                               "obese")) -->
<!-- ``` -->

<!-- to obtain the same result.  -->

<!-- With the standard plotting device in `R` we can now specify: -->

<!-- ```{r cache=TRUE} -->
<!-- plot(bmi ~ age, subset = class == "underweight", col = "light blue", data = boys2,  -->
<!--      ylim = c(10, 35), xlim = c(0, 25)) -->
<!-- points(bmi ~ age, subset = class == "healthy", col = "light green", data = boys2) -->
<!-- points(bmi ~ age, subset = class == "overweight", col = "orange", data = boys2) -->
<!-- points(bmi ~ age, subset = class == "obese", col = "red", data = boys2) -->
<!-- ``` -->

<!-- and with `ggplot2` we can call -->

<!-- ```{r cache=TRUE} -->
<!-- boys2 %>% -->
<!--   ggplot() + -->
<!--   geom_point(aes(age, bmi, col = class)) -->
<!-- ``` -->

<!-- Although the different classifications have different colours, the colours are not conform the specifications of this exercise. We can manually override this: -->

<!-- ```{r cache=TRUE} -->
<!-- boys2 %>% -->
<!--   ggplot() + -->
<!--   geom_point(aes(age, bmi, col = class)) + -->
<!--   scale_color_manual(values = c("light blue", "light green", "orange", "red")) -->
<!-- ``` -->

<!-- Because there are missing values, `ggplot2` displays a warning message. If we would like to not consider the missing values when plotting, we can simply exclude the `NA`s by using a `filter()`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys2 %>%  -->
<!--   filter(!is.na(class)) %>% -->
<!--   ggplot() + -->
<!--   geom_point(aes(age, bmi, col = class)) + -->
<!--   scale_color_manual(values = c("light blue", "light green", "orange", "red")) -->
<!-- ``` -->

<!-- Specifying a filter on the feature `class` is sufficient: age has no missings and the missings in `class` directly correspond to missing values on `bmi`. Filtering on `bmi` would therefore yield an identical plot. -->

<!-- --- -->

<!-- 3. **Create a histogram for `age` in the `boys` data set** -->

<!-- With the standard plotting device in `R`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %$% -->
<!--   hist(age, breaks = 50) -->
<!-- ``` -->

<!-- The `breaks = 50` overrides the default breaks between the bars. By default the plot would be -->

<!-- ```{r cache=TRUE} -->
<!-- boys %$% -->
<!--   hist(age) -->
<!-- ``` -->
<!-- Using a pipe is a nice approach for this plot because it inherits the names of the objects we aim to plot. Without the pipe we might need to adjust the main title for the histogram: -->

<!-- ```{r cache=TRUE} -->
<!-- hist(boys$age, breaks = 50) -->
<!-- ``` -->

<!-- With `ggplot2`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %>% -->
<!--   ggplot() +  -->
<!--   geom_histogram(aes(age), binwidth = .4) -->
<!-- ``` -->

<!-- Please note that the plots from `geom_histogram()` and `hist` use different calculations for the bars (bins) and hence may look slightly different. -->

<!-- --- -->

<!-- 4. **Create a bar chart for `reg` in the boys data set** -->
<!-- With a standard plotting device in `R`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %$% -->
<!--   table(reg) %>% -->
<!--   barplot() -->
<!-- ``` -->

<!-- With `ggplot2`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %>% -->
<!--   ggplot() +  -->
<!--   geom_bar(aes(reg)) -->
<!-- ``` -->

<!-- Note that `geom_bar` by default plots the `NA`'s, while `barplot()` omits the `NA`'s without warning. If we would not like to plot the `NA`s, then a simple `filter()` (see exercise 2) on the `boys` data is efficient.  -->

<!-- --- -->

<!-- 5. **Create a box plot for `hgt` with different boxes for `reg` in the `boys` data set** -->
<!-- With a standard plotting device in `R`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %$% -->
<!--   boxplot(hgt ~ reg) -->
<!-- ``` -->

<!-- With `ggplot2`: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %>% -->
<!--   ggplot(aes(reg, hgt)) + -->
<!--   geom_boxplot() -->
<!-- ``` -->

<!-- --- -->

<!-- 6. **Create a density plot for `age` with different curves for boys from the `city` and boys from rural areas (`!city`).** -->
<!-- With a standard plotting device in `R`: -->

<!-- ```{r cache=TRUE} -->
<!-- d1 <- boys %>% -->
<!--   subset(reg == "city") %$% -->
<!--   density(age) -->
<!-- d2 <- boys %>% -->
<!--   subset(reg != "city") %$%  -->
<!--   density(age) -->

<!-- plot(d1, col = "red", ylim = c(0, .08))  -->
<!-- lines(d2, col = "blue")  -->

<!-- ``` -->

<!-- The above plot can also be generated without pipes, but results in an *ugly* main title. You may edit the title via the `main` argument in the `plot()` function. -->

<!-- ```{r cache=TRUE} -->
<!-- plot(density(boys$age[!is.na(boys$reg) & boys$reg == "city"]),  -->
<!--      col = "red",  -->
<!--      ylim = c(0, .08)) -->
<!-- lines(density(boys$age[!is.na(boys$reg) & boys$reg != "city"]),  -->
<!--       col = "blue") -->
<!-- ``` -->

<!-- With `ggplot2` everything looks much nicer: -->

<!-- ```{r cache=TRUE} -->
<!-- boys %>% -->
<!--   mutate(area = ifelse(reg == "city", "city", "rural")) %>% -->
<!--   filter(!is.na(area)) %>% -->
<!--   ggplot(aes(age, fill = area)) + -->
<!--   geom_density(alpha = .3) # some transparency -->
<!-- ``` -->

<!-- --- -->

<!-- 7. **Create a diverging bar chart for `hgt` in the `boys` data set, that displays for every `age` year that year's mean height in deviations from the overall average `hgt`** -->

<!-- Let's not make things too complicated and just focus on `ggplot2`: -->

<!-- ```{r} -->
<!-- boys %>% -->
<!--   mutate(Hgt = hgt - mean(hgt, na.rm = TRUE), -->
<!--          Age = cut(age, 0:22, labels = 0:21)) %>% -->
<!--   group_by(Age) %>% -->
<!--   summarize(Hgt = mean(Hgt, na.rm = TRUE)) %>%  -->
<!--   mutate(Diff = cut(Hgt, c(-Inf, 0, Inf), -->
<!--                     labels = c("Below Average", "Above Average"))) %>% -->
<!--   ggplot(aes(x = Age, y = Hgt, fill = Diff)) +  -->
<!--   geom_bar(stat = "identity") + -->
<!--   coord_flip() -->
<!-- ``` -->

<!-- We can clearly see that the average height in the group is reached just before age 7.  -->

<!-- The `group_by()` and `summarize()` function are advanced `dplyr` functions used to return the `mean()` of deviation `Hgt` for every group in `Age`. For example, if we would like the mean and sd of height `hgt` for every region `reg` in the `boys` data, we could call: -->

<!-- ```{r} -->
<!-- boys %>% -->
<!--   group_by(reg) %>%  -->
<!--   summarize(mean_hgt = mean(hgt, na.rm = TRUE),  -->
<!--             sd_hgt   = sd(hgt, na.rm = TRUE)) -->
<!-- ``` -->

<!-- The `na.rm` argument ensures that the mean and sd of only the observed values in each category are used. -->


<!-- --- -->

<!-- End of Practical -->

<!-- --- -->

<!-- #### Useful References -->

<!-- [The `ggplot2` reference page](https://ggplot2.tidyverse.org/reference/index.html) -->


<!-- --- -->



<!-- End of `Practical x`.  -->

