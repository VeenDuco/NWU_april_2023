---
title: "Introduction to R - Practical 2"
author: "Developed by Gerko Vink, Adapted by Duco Veen"
format: 
  html:
    toc: true
    toc-depth: 5
    toc_float: true
    code-fold: true
---



---

# Exercises


---

1. **Open `RStudio` in your practicals project. Create a new script to work with in this second practical.**

---

2. **Install package `mice`. Then load it to make the content available to yourself. **

Go to `Tools` > `Install Packages` in `RStudio`. If you are connected to the internet, select  `Repository` under `Install From` and type `mice` under `Packages`. Leave the `Install to Library` at default and make sure that `Install Dependencies` is selected. Click install. If you are not connected to the internet, select `Package Archive File` under "Install from" and navigate to the respective file on your drive. 

Some packages depend on other packages, meaning that their functionality may be limited if their dependencies are not installed. Installing dependencies is therefor recommended, but internet connectivity is required. 

If all is right, you will receive a message in the console that the package has been installed (as well as its dependencies. 

ALternatively, if you know the name of the package you would like to install - in this case `mice` - you can also call `install.packages("mice")` in the console window.

Loading packages can be done through function `library()`.
```{r, eval = FALSE}
#| code-fold: false
library(mice)
```

`library()` will yield an error and terminate all executions if the package is not available. 

---

3. **Most packages have datasets included. Open the `mammalsleep` dataset from package `mice` by typing `mammalsleep` in the console, and subsequently by using the function `View()`. **

Using `View()` is preferred for inspecting datasets that are large. `View()` opens the dataset in a spreadsheet-like window (conform MS Excel, or SPSS). If you `View()` your own datasets, you can even edit the datasets' contents. 

---

4. **Write the mammalsleep dataset from package `mice` to the work directory as a tab-delimited text file with `.` as a decimal seperator. Name the file `mammalsleep.txt`**

```{r, warning=FALSE, message=FALSE}
library(mice)
write.table(mammalsleep, "mammalsleep.txt", sep = "\t", dec = ".", row.names = FALSE)
```
The command `sep = "\t"` indicates that the file is tabulated and the command `dec = "."` indicates that a point is used as the decimal seperator (instead of a comma). `row.names = FALSE` tells `R` that row names are not to be included in exported file. 

---

5. **Import the `mammalsleep.txt` file. **
```{r}
sleepdata <- read.table("mammalsleep.txt", sep = "\t", dec = ".", header = TRUE, stringsAsFactors = TRUE)
```

The command `sep = "\t"` indicates that the file is tabulated and the command `dec = "."` indicates that a point is used as the decimal seperator (instead of a comma). `header = TRUE` tells `R` that variable names are included in the header.

All files that are presented in the work directory of the current `R` project, can essentially be imported into the workspace (the space that contains all environments) directly. All other locations require you to specify the specific path from the root of your machine. To find out what the current work directory is, you can type `getwd()` and to change the work directory you can use `setwd()`. The beauty of using projects in RStudio is that you would never have to change the work directory, as the work directory is automatically set, relative to your projects' `R`-scripts. 

---

6. **The dataset we've just imported contains the sleepdata by Allison & Cicchetti (1976). Inspect the sleepdata and make yourself familiar with it. **

If you would like to know more about this dataset, you can open the help for the `mammalsleep` dataset in package `mice` through `?mammalsleep`. Don't forget to load package `mice` first. 

Inspecting the sleepdata could be done by 
```{r}
#| code-fold: show
str(sleepdata) #the data structure
summary(sleepdata) #distributional summaries
round(cor(sleepdata[, -1], use = "pairwise.complete.obs"), 2) #bivariate correlations, variable 1 excluded. 
head(mammalsleep) #first six rows
tail(mammalsleep) #last six rows
```

or it can be done by using

```{r, eval=FALSE}
#| code-fold: false
?mammalsleep # the help
```
Note that the sleepdata dataset is automatically recognized as a dataframe. After all, there is one factor (categorical variable) containing the animal names. 

The functions `head()` and `tail()` are very useful functions. As is function `str` as it gives you a quick overview of the measurement levels in `mammalsleep`. 

Since `mammalsleep` is an `R`-dataset, there should be a help file. Taking a look at `?mammalsleep` may yield valuable insight about the measurements and origin of the variables. 

One thing that may have caught your attention is the relation between `ts`, `ps` and `sws`. This is a deterministic relation where total sleep (`ts`) is the sum of paradoxical sleep (`ps`) and short-wave sleep (`sws`). In the event that you would model the data, you need to take such relations into account. 

---

7. **Save the current workspace. Name the workspace `Practical_2.RData`. Also, save the sleepdata file as a separate workspace called `Sleepdata.RData`. **

Now that we have imported our data, it may be wise to save the current workspace, i.e. the current state of affairs. Saving the workspace will leave everything as is, so that we can continue from this exact state at a later time, by simply opening the workspace file. To save everything in the current workspace, type
```{r}
#| code-fold: false
save.image("Practical_2.RData")
```

To save just the dataset `sleepdata`, and nothing else, type
```{r}
#| code-fold: false
save(sleepdata, file = "Sleepdata.RData")
```

With the save functions, any object in the workspace can be saved. 

---

8. **Please start practicing with getting your own data into R!**

---

# Useful links 

- For a short guideline to import multiple formats into `R`, see e.g. http://www.statmethods.net/input/importingdata.html. 

If your current software-analysis platform is different from `R`, chances are that you prepare your data in the software of your choice. In `R` there are fantastic facilities for importing and exporting data and I would specifically like to pinpoint you to package [`haven`](https://haven.tidyverse.org/index.html) by [Hadley Wickham](http://hadley.nz). It provides wonderful functions to import and export many data types from software such as Stata, SAS and SPSS. For integrating Mplus into `R`, package `MplusAutomation` is essential.

- [`Package haven`](https://haven.tidyverse.org/index.html) for importing/exporting `SPSS`, `SAS` and `STATA` data.

---


End of `Practical 2`. We have now practiced with getting data from R, storing it, loading it back in. **Please start practicing with getting your own data into R!**

