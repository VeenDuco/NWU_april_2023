---
title: "Structure of R"
author: "Duco Veen"
format: 
  revealjs:
    slide-number: true
    smaller: true
    incremental: false
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: logo.jpg
    css: logo.css
    footer: <https://VeenDuco.github.io/NWU_april_2023/>
    
---

## Credits {.smaller}
::: {.nonincremental}
- For this lecture materials from the Utrecht University R summerschool are adapted. 

- Original materials can be found at https://github.com/gerkovink/R

- Credits to Gerko Vink for the original development. 
:::


# The blueprint of `R` 

## Layers in `R`
There are several 'layers' in `R`. Some layers you are allowed to fiddle around in, some are forbidden. In general there is the following distinction:

- The global environment. 
- User environments
- Functions
- Packages
- Namespaces

## Layers in `R`

We will go through **briefly**, because you need to be aware. 

This is where problems can come from.

## Environments
The global environment can be seen as an olympic-size swimming pool. Everything you do has its place there. 

If you'd like, you may create another, separate environment to work in. 

- A user environment would by default not have access to other environments

## Functions

- If you create a function, it is positioned in the global environment. 

- Everything that happens in a function, stays in a function. Unless you specifically tell the function to share the information with the global environment. 

- See functions as a shampoo bottle in a swimming pool to which you add some water. If you'd like to see the color of the mixture, you'd have to squeeze the bottle for it to come out. 

## Packages
- Packages have their own space. 

    - Everything needed to run the functions in a package is needly contained within its own space
    - See packages as separate (mini) pools that are connected to the main pool (the global environment)

## Loading packages

There are two ways to load a package in `R`
```{.r}
library(stats)
``` 
and
```{.r}
require(stats)
```

`require()` will produce a warning when a package is not found. In other words, it will not stop as function `library()` does. 

## Installing packages
The easiest way to install e.g. package `mice` is to use
```{.r eval=FALSE}
install.packages("mice")
```

Alternatively, you can also do it in `RStudio` through 

`Tools --> Install Packages`

## Namespaces
- Namespaces. These are the deeper layers that feed new water to the surface of the mini pools.    
    - Packages can have namespaces. 
    - Functions within packages are executed within the package or namespace and have access to the global environment. 
    - Objects in the global environment that match objects in the function's namespace are ignored when running functions from packages!

# `R` in depth

## Workspaces and why you should sometimes save them
A workspace contains all changes you made to environments, functions and namespaces. 

A saved workspace contains everything at the time of the state wherein it was saved. 

You do not need to run all the previous code again if you would like to continue working at a later time. 

- You can save the workspace and continue exactly where you left. 

Workspaces are compressed and require relatively little memory when stored. The compression is very efficient and beats reloading large datasets from raw text. 

## History and why it is useful
`R` by default saves (part of) the code history and `RStudio` expands this functionality greatly. 

Most often it may be useful to look back at the code history for various reasons.

- There are multiple ways to access the code history.
  
    1. Use arrow up in the console. This allows you to go back in time, one codeline by one. Extremely useful to go back to previous lines for minor alterations to the code.
    2. Use the history tab in the environment pane. The complete project history can be found here and the history can be searched. This is particularly convenient when you know what code you are looking for. 
    
## Working in projects in `RStudio`
- Every project has its own history
- Every research project has its own project
- Every project can have its own folder, which also serves as a research archive
- Every project can have its own version control system
- R-studio projects can relate to Git (or other online) repositories

# Loading in data

## Different options

- Essential for data analyses
- What data is already in R?
- How to get **your own** data into R.
  - Point and click
  - Using code

## Data in R

- R contains some data already
- Packages can contain data
- These help with examples and practice

## Data in R

For instance, in base R we have a package called `datasets` with many datasets.

<center>
<img src="figures/load_data_datasets.png" alt="HTML5 Icon" height = 70%>
</center>

## Data in R

Let's grab some data

```{r eval=TRUE, echo=TRUE}
library(datasets) # not strictly needed
cars
```

## Data in R

Let's store it, so we can use it. 

```{r eval=TRUE, echo=TRUE}
library(datasets) # not strictly needed
data <- cars
```

Now let's try to get the 5th row and the 2nd columns out.

```{r eval=TRUE, echo=TRUE}
data[5, ]
data[, 2]
# or alternatively
data$dist
```

This last part worked because of the class of the object.

```{r eval=TRUE, echo=TRUE}
class(data)
```

# Data from outside of R

## Point and click

<center>
<img src="figures/load_data.png" alt="HTML5 Icon" height = 70%>
</center>

## Point and click

<center>
<img src="figures/load_data2.png" alt="HTML5 Icon" height = 70%>
</center>

## Point and click

<center>
<img src="figures/load_data3.png" alt="HTML5 Icon" height = 70%>
</center>

## Using code

You can copy the code from the point and click for in a script, making the script reproducible.

```{.r eval=FALSE}
library(haven)
data <- read_sav("something.sav")
```

But there are many functions, for different formats. E.g.

```{.r eval=FALSE}
read.csv()
read.delim()
read_stata()
read.table()
```

How to find them? 

- use `??read`
- type `read` in console/script and use auto complete
- google
- via packages

## What settings to use?

- Use the `?` option!