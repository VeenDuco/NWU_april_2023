---
title: "Modelling Basics - Practical 1"
author: "Developed by Gerko Vink, Adapted by Duco Veen"
format: 
  html:
    toc: true
    toc-depth: 5
    toc_float: true
    code-fold: true
---

# Exercises


---

1. **Open `RStudio` in your practicals project. Create a new script to work with in this first practical related to modelling. Figure out a naming so you would be able to find it back.**


---

2. **Remember that we saved our dataset before? Let's load it and continue!**

```{r}
#| code-fold: false
load("Sleepdata.RData")
```

If you did not store this, use the following code: 

```{r}
#| code-fold: false
sleepdata <- mice::mammalsleep
```

The `::` refers `R` to the content of a package we did not ask it to load yet. This way it knows where to find the mammalsleep data. 

---

3. **Some animals were not used in the calculations by Allison and Cicchetti. Exclude the following animals from the sleepdata dataset: Echidna, Lesser short-tailed shrew and Musk shrew. Save the dataset as sleepdata2.** Tip: use the square brackets to indicate [rows, columns].

There are three ways to exclude the three animals from the dataset. The first approach uses the names:
```{r}
#| code-fold: false
exclude <- c("Echidna", "Lesser short-tailed shrew", "Musk shrew")
which <- sleepdata$species %in% exclude #Indicate the species that match the names in exclude
which
sleepdata2 <- sleepdata[!which, ]
```

the second approach uses function `filter()` from package `dplyr`:
```{r}
#| code-fold: false
library(dplyr) # Data Manipulation
filter(sleepdata, !sleepdata$species %in% exclude) # ! makes all TRUES into FALSE
```

and the third approach uses the row numbers directly (you would need to inquire about, or calculate the rownumbers)
```{r}
#| code-fold: false
sleepdata2 <- sleepdata[-c(16, 32, 38), ]
```

Note that the numbered option requires less code, but the named option has a much lower probability for error. As the dataset might change, or might get sorted differently, the second option may not be valid anymore. 

---

4. **Plot brain weight as a function of species. **
```{r}
plot(brw ~ species, data = sleepdata2)
```

---

5. **Some animals have much heavier brains than other animals. Find out the names of the animals that have a brain weight larger than 1 standard deviation above the mean brain weight. Replicate the plot from Question 4 with only these animals and do not plot any information about the other animals. **

To find out which animals have a brain weight larger than 1 standard deviation above the mean brain weight:
```{r}
#| code-fold: show
sd.brw <- sd(sleepdata2$brw) #standard deviation  
mean.brw <- mean(sleepdata2$brw) #mean
which <- sleepdata2$brw > (mean.brw + (1 * sd.brw)) #which are larger?
as.character(sleepdata2$species[which]) #names of the animals with brw > 1000
```
Try to plot these animals:
```{r}
#| code-fold: true
plot(brw ~ species, data = sleepdata2[which, ])
```

The downside is that it still prints all the animals on the x-axis. This is due to the factor labels for `species` being copied to the smaller subset of the data. Plot automatically takes over the labels. For example, 
```{r}
#| code-fold: false
sleepdata2$species[which]
```

returns only 3 mammals, but still has 62 factor levels. To get rid of the unused factor levels, we can use function `factor()`:
```{r}
#| code-fold: false
sleepdata3 <- sleepdata2[which, ]
sleepdata3$species <- factor(sleepdata3$species)
sleepdata3$species
```
To plot the graph that we wanted:
```{r}
#| code-fold: false
plot(brw ~ species, data = sleepdata3)
```

---

Now let's practice some more with some modelling functions. Use `sleepdata2`.

---
6. **Get the correlations between bodyweight (bw), brainweight (brw), maximum life span (mls) and total sleep (ts). Use the defaults of the `cor` function.**

```{r}
#| code-fold: true
cor(sleepdata2[, c("bw", "brw", "mls", "ts")])
```

Hm. That did not work so well. What's going on? We have some missings that we have to deal with. let's use the most data we can by adding the argument `use = "pairwise.complete.obs"`. That way we then calculate the correlation between each pair of variables using all complete pairs of observations on those variables.

```{r}
#| code-fold: true
cor(sleepdata2[, c("bw", "brw", "mls", "ts")], use = "pairwise.complete.obs")
```

That work's better! Those are some high correlations, maybe we can see if we could predict brainweight from those other variables using a regression? 

We also want to go and compare models, but we had some missings. Let's choose the easy way out for now and only use the complete cases. 

7. **Create a new data frame with only those four variables and remove the cases with missing values.**

```{r}
#| code-fold: show
data <- sleepdata2[, c("bw", "brw", "mls", "ts")]
# there is a function to find the complete cases
complete.cases(data)
# we can use that to select the complete case rows
data <- data[complete.cases(data), ]
```

a second approach uses functions `select()` from package `dplyr`:

```{r}
#| code-fold: show
# get the relevant columns extracted from the sleepdata
data <- select(sleepdata2, bw, brw, mls, ts)
# na.omit is another way of removing missing values
data <- na.omit(data)
```

8. **Now start with the simple model where brainweight is predicted by bodyweight. Store the regression fit and investigate it. **

```{r}
fit1 <- lm(brw ~ bw, data = data)
```

```{r, eval = FALSE}
#| code-fold: show
summary(fit1)
```



9. **Now add the other predictors. Store the regression fit and investigate it. **

```{r}
fit2 <- lm(brw ~ bw + mls + ts, data = data)
```

```{r, eval = FALSE}
#| code-fold: show
summary(fit2)
```




`mls` seems to add something to the model. But `ts` not so much. If these were the two competing models which would you pick?

10. **Use model selection tools to investigate which of the two models you'd go with. **

```{r}
AIC(fit1, fit2)
```

```{r, eval = FALSE}
anova(fit1, fit2)
```


End of `Practical 1` of modelling basics. You now practiced with data loading, filtering, plotting, correlation, regression and model comparison. Great job! Try it out on your own data!
