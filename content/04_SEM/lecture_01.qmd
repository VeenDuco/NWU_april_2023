---
title: "Introduction to SEM in R"
author: "Duco Veen"
format: 
  revealjs:
    slide-number: true
    smaller: true
    incremental: false
    chalkboard: 
      buttons: true
    preview-links: auto
    logo: logo.jpg
    css: logo.css
    footer: <https://VeenDuco.github.io/NWU_april_2023/>
execute:
  echo: true 
    
---


# lavaan

## 

<center>
https://lavaan.ugent.be/
</center>
<br>
<br>
<center>
<img src="figures/lavaan.PNG" alt="HTML5 Icon" width = 70%>
</center>



## How to read lavaan code

<center>
<img src="figures/lavaan2.PNG" alt="HTML5 Icon" width = 70%>
</center>

## prepare and load package to do CFA

- lavaan for SEM modelling
- semPlot to make visualisations
- ggplot for some plots

```{r, message=TRUE, echo = TRUE}
library(lavaan)
library(semPlot)
library(ggplot2)
```



## Get data

- Holzinger and Swineford Dataset (9 Variables)

- Mental ability test scores of seventh- and eighth-grade children from two different schools 

- subset with 9 variables

x1: Visual perception

x2: Cubes

x3: Lozenges

x4: Paragraph comprehension

x5: Sentence completion

x6: Word meaning

x7: Speeded addition

x8: Speeded counting of dots

x9: Speeded discrimination straight and curved capitals

## Get data

```{r, message=TRUE, echo = TRUE}
data <- HolzingerSwineford1939
summary(data)
```

## A quick look at visual

```{r, message=TRUE, echo = TRUE}
p1 <- ggplot(data, aes(x = x1, y = x2, col = school)) + 
  geom_point() +
  geom_smooth(method = lm)
p2 <- ggplot(data, aes(x = x1, y = x3, col = school)) + 
  geom_point() +
  geom_smooth(method = lm) 
p3 <- ggplot(data, aes(x = x2, y = x3, col = school)) + 
  geom_point() +
  geom_smooth(method = lm)
ggpubr::ggarrange(p1, p2, p3, common.legend = TRUE)
```


## Specify your model

- How about a CFA for the latent factor `visual`
- Ignore `school` for now

```{r, message=TRUE, echo = TRUE}
model <- '
visual =~ 1 * x1 + x2 + x3
visual ~~ visual
x1 ~ 1
x2 ~ 1
x3 ~ 1
x1 ~~ x1
x2 ~~ x2
x3 ~~ x3
visual ~ 0 
'
```

*note*: We have defined the scale by setting the first factor loading to 1 and the mean of the latent variable to 0.

## Plotting the model

```{r, eval = TRUE, message = FALSE, echo=TRUE}
library(semPlot)
fit_hidden <- lavaan(model, data = data)
semPaths(fit_hidden)
``` 

## Fit your model

```{r, message=TRUE, echo = TRUE}
fit <- lavaan(model, data = data)
```

## Check your fit object

   - Use summary as before

```{r}
summary(fit)
```


## Check your fit object

- Alternatively use lavaan function `parameterEstimates`.

```{r}
parameterEstimates(fit)
```

## Check your model fit

```{r}
fitMeasures(fit)
```

- it was a saturated model so hard to say something about fit. 

## Now plot with estimates included

```{r, eval = TRUE, message = FALSE, echo=TRUE}
library(semPlot)
fit_hidden <- lavaan(model, data = data)
semPaths(fit_hidden, whatLabels = "est")
``` 


# Extending this model

## Specify your model
```{r, message=TRUE, echo = TRUE}
model2 <- '
visual =~ 1 * x1 + x2 + x3 + x4
visual ~~ visual
x1 ~ 1
x2 ~ 1
x3 ~ 1
x4 ~ 1
x1 ~~ x1
x2 ~~ x2
x3 ~~ x3
x4 ~~ x4
visual ~ 0 
'
```

*note*: We have defined the scale by setting the first factor loading to 1 and the mean of the latent variable to 0.

## Plotting the data

- do we expect a good fit?
  - not on theory, maybe on data?
  
```{r, message=TRUE, echo = TRUE} 
data.plot <- reshape2::melt(data, id = c("id", "school", "x4"), 
                            c(paste0("x", 1:3)), "x")
ggplot(data.plot, aes(x = value, y = x4)) +
  geom_point() +
  geom_smooth(method = lm) + 
  theme_classic() + 
  facet_wrap(~x)   
```

## Plotting the model

```{r, eval = TRUE, message = FALSE, echo=TRUE}
library(semPlot)
fit_hidden2 <- lavaan(model2, data = data)
semPaths(fit_hidden2)
``` 

## Fit your model

```{r, message=TRUE, echo = TRUE}
fit2 <- lavaan(model2, data = data)
```

## Check your fit object

   - Use summary as before

```{r}
summary(fit2)
```

## Check your fit object

```{r}
parameterEstimates(fit2)
```

## Check your model fit

```{r}
fitMeasures(fit2)
```

- cfi okay, tli not so good, rmsea not so good
  - what we expected?

## Plot with parameter estimates

```{r, eval = TRUE, message = FALSE, echo=TRUE}
fit_hidden2 <- lavaan(model2, data = data)
semPaths(fit_hidden2, whatLabels = "est")
``` 

# Add another factor

## Specify your model
```{r, message=TRUE, echo = TRUE}
model3 <- '
visual =~ 1 * x1 + x2 + x3
textual =~ 1 * x4 + x5 + x6
visual ~~ visual
textual ~~ textual
visual ~~ textual
x1 ~ 1
x2 ~ 1
x3 ~ 1
x4 ~ 1
x5 ~ 1
x6 ~ 1
x1 ~~ x1
x2 ~~ x2
x3 ~~ x3
x4 ~~ x4
x5 ~~ x5
x6 ~~ x6
visual ~ 0
textual ~ 0
'
```

*note*: We have defined the scale by setting the first factor loading to 1 and the mean of the latent variable to 0.


## Plotting the model

```{r, eval = TRUE, message = FALSE, echo=FALSE}
library(semPlot)
fit_hidden3 <- lavaan(model3, data = data)
semPaths(fit_hidden3)
``` 

## Fit your model

```{r, message=TRUE, echo = TRUE}
fit3 <- lavaan(model3, data = data)
```

## Check your fit object

   - Use summary as before

```{r}
summary(fit3)
```

## Check your fit object

```{r}
parameterEstimates(fit3)
```

## Check your model fit

```{r}
fitMeasures(fit3)
```


- much better, also aligns with theory, GREAT!


## Check your model fit

```{r, eval = TRUE, message = FALSE, echo=FALSE}
fit_hidden3 <- lavaan(model3, data = data)
semPaths(fit_hidden3, whatLabels = "est")
``` 

## simpler ways

- We did this all with the function `lavaan()`
  - Making everything explicit

- Could have used `cfa()` for simpler syntax
  - But you need to be aware of the defaults then

- Also function for latent growth curve models
  - `growth()`
 
 
## Used to Mplus?
 
```{.r}
mplus2lavaan()
mplus2lavaan.modelSyntax()
```

```
TITLE:  Model Duco

DATA:
  FILE IS "C:\Users\Gebruiker\Desktop\LAB 1\ex5.1.dat";

VARIABLE: NAMES ARE y1-y6;
MODEL: f1 BY y1-y3;
f2 BY y4-y6;
``` 

```{r}
mplus2lavaan("model51.inp", run = FALSE)
```

```{r}
mplus2lavaan.modelSyntax(syntax = "MODEL: f1 BY y1-y3;
f2 BY y4-y6;")
```

