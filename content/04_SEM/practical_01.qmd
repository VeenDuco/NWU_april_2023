---
title: "Practical 1, SEM with lavaan"
author: "Duco Veen"
format: 
  html:
    toc: true
    toc_float: true
    code-fold: show
    code-copy: true
execute:
  echo: true
---


```{r}
#| code-fold: false
# loading library
library(lavaan)
library(psych) # for the bfi data
library(dplyr) # for data manipulations
library(semPlot)
```

# Exercises

1. **Open `RStudio` in your practicals project. Create a new script to work with in this second practical related to modelling. Figure out a naming so you would be able to find it back.**

## Confirmatory Factor Analysis

2. **We will load some data now. Consider replacing the data with some of your own so the exercises become more relevant to you.**

We will use example data from the `psych` package. The `bfi` dataset. For more details see `?bfi`. 

```{r}
#| code-fold: show
data <- psych::bfi
```

3. **Get some descriptions or summaries of the data.**

```{r}
# For instance using
summary(data)
```

4. **Fit a confirmatory factor analysis for the neuroticism factor using the `cfa()` function from `lavaan`. See `?cfa` for more details. Also create plots with the `semPaths()` function. **

First specify the model.

```{r}
cfa.model <- 'Neu  =~ N1 + N2 + N3 + N4 + N5'
```

Then we will fit the model and look at the results

```{r}
fit.cfa <- cfa(cfa.model, data = data)
summary(fit.cfa)
semPaths(fit.cfa, whatLabels = "est")
```

Using the `cfa()` function, you have to specify less in the model compared to the `lavaan()` function that we used in the lecture. What defaults are being used? Look in `?cfa()` at the Details section. There you will find that `cfa()` is a wrapper function that actually uses `lavaan()` with specific defaults. Are intercepts for instance estimated or not? Did you see them in the figures?

5. **Rerun the analysis above, now include the meanstructure.**

```{r}
fit.cfa.means <- cfa(cfa.model, data = data, meanstructure = TRUE)
summary(fit.cfa.means)
semPaths(fit.cfa.means, whatLabels = "est")
```


6. **Now investigate the fitmeasures using the `fitmeasures()` function.**

```{r}
fitmeasures(fit.cfa.means)
```

`cfi` seems nice, `tli` less so, `rmsea` is not looking to good.  

7. **Now specify a CFA model for the 5 factors from the dataset.**

```{r}
cfa.model5 <- '
Agr =~ A1 + A2 + A3 + A4 + A5
Con =~ C1 + C2 + C3 + C4 + C5
Ext =~ E1 + E2 + E3 + E4 + E5
Neu =~ N1 + N2 + N3 + N4 + N5
Ope =~ O1 + O2 + O3 + O4 + O5
'
```


7. **Investigate the fit and fitmeasures, what do you think?**

```{r}
fit.cfa5 <- cfa(cfa.model5, data = data, meanstructure = TRUE)
summary(fit.cfa5)
```


```{r}
#| fig-height: 7
semPaths(fit.cfa5, whatLabels = "est")
```


```{r}
fitmeasures(fit.cfa5)
```

Hm.. The fit is not so great. Perhaps we can look at modification indices. Beware, we are leaving the realm of confirmatory analysis now. We will look at the 5 best modifications.

```{r}
modificationindices(fit.cfa5, sort. = TRUE, maximum.number = 5)
```

We could also consider looking at Exploratory Factor Analyses, analyse the structure and collect new data to confirm it. Or perhaps we would like to adjust a questionnaire such that we replace items that seem to fit less well. All sort of things that could be done. 

# Examples

Since there where some questions about some more advanced SEM methods, I'll present here a few examples with their sources. They can help you to try and work this out on your own data.

## Mediation example

This example come from the [lavaan website](https://lavaan.ugent.be/tutorial/mediation.html) which is a great resource. 

First, some data is simulated that would go with a mediation model. 

```{r}
set.seed(1234)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
Data <- data.frame(X = X, Y = Y, M = M)
```

The `rnorm()` function let's you simulate data from a normal distribution. Here 100 samples are taken from a standard normal distribution for X. The mediator is specified by the relationship of 0.5 times X plus unique variation, coming from a standard normal distribution. Y is then specified as 0.7 times the moderator plus unique variation, coming from a standard normal distribution. The data is then put in a dataframe. 

Next we need to specify the lavaan model. To be able to read and understand the model this table might help:

<center>
<img src="figures/lavaan2.PNG" alt="HTML5 Icon" width = 70%>
</center>

```{r}
model.med <- ' # direct effect
             Y ~ c*X
           # mediator
             M ~ a*X
             Y ~ b*M
           # indirect effect (a*b)
             ab := a*b
           # total effect
             total := c + (a*b)
         '
```

Next we should fit the model. To get more reliable standard errors, we can make use of the option `se = "bootstrap"`.

```{r}
#| cache: true
fit.med <- sem(model.med, data = Data, se = "bootstrap")
summary(fit.med)
```

Finally, we can plot the model. 

```{r}
semPaths(fit.med, whatLabels = 'est', edge.label.cex = 2)
```

## Latent Growth Curve example

This is a short simulated example I created:

We simulate some data where there are 5 timepoints. The mean intercept value is 2, the mean slope value is 0.7. The variance for the intercept is 1 and the variance for the slope is 0.5^2=0.25. The residual variance at each timepoint is 0.5^2=0.25.

```{r}
# Set seed for reproducibility
set.seed(123)

# Simulate data for latent growth curve model
n <- 500 # sample size
t <- 5  # number of time points
time <- 1:t  # time variable
intercept <- rnorm(n, mean = 2, sd = 1)  # intercept latent variable
slope <- rnorm(n, mean = 0.7, sd = 0.5)  # slope latent variable
observed_vars <- data.frame()

for (i in 1:n) {
  # Simulate observed variables for each participant
  Y <- intercept[i] + slope[i] * time + rnorm(t, mean = 0, sd = 0.5)
  observed_vars <- rbind(observed_vars, Y)
}
colnames(observed_vars) <- paste0("Y", time)

```

Now get your growth model specified. 

```{r}
# Create lavaan model syntax
growth_model <- "
  # latent variables
    intercept =~ 1 * Y1 + 1 * Y2 + 1 * Y3 + 1 * Y4 + 1 * Y5
    slope =~ 1* Y1 + 2 * Y2 + 3* Y3 + 4 * Y4 + 5 * Y5
"
```

Fit it, and look if the estimates are as we simulated them. 

```{r}
# Fit the model to the simulated data
fit.growth <- lavaan::growth(growth_model, data = observed_vars)

# Summarize the model results
summary(fit.growth)

```

Great, that looks good! Now let's just finish with a plot of this model. 

```{r}
#| fig-height: 4
#| fig-width: 7
semPaths(fit.growth, whatLabels = "est", edge.label.cex = 1)
```


## useful links

- [lavaan website](https://lavaan.ugent.be/)
- Descriptions of fitmeasures in SEM by David Kenny, see [here](https://davidakenny.net/cm/fit.htm).

End of `Practical 1` related to SEM using `lavaan`. 

